# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-08-17T15:21:40+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, EmailStr, Field, conint


class FileType(Enum):
    tcx = 'tcx'
    gpx = 'gpx'
    fit = 'fit'


class Type(Enum):
    shoes = 'shoes'
    bike = 'bike'


class CreateGearRequest(BaseModel):
    name: str = Field(..., description='Name of the gear.', example='Cool Shoes')
    description: Optional[str] = Field(
        None,
        description='Description of the gear.',
        example='Comfortable running shoes.',
    )
    brand_name: Optional[str] = Field(
        None, description='Brand of the gear.', example='Hoka'
    )
    model_name: Optional[str] = Field(
        None, description='Model of the gear.', example='Mach 6'
    )
    primary: Optional[bool] = Field(
        False, description='Whether this is the primary gear.', example=True
    )
    type: Type = Field(..., description='Type of gear.', example='shoes')
    mileage: Optional[float] = Field(
        None, description='Starting mileage in meters.', example=0
    )


class UpdateGearRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='Updated name.', example='Updated Cool Shoes'
    )
    description: Optional[str] = Field(
        None, description='Updated description.', example='Updated comfortable shoes.'
    )
    brand_name: Optional[str] = Field(
        None, description='Updated brand.', example='Nike'
    )
    model_name: Optional[str] = Field(
        None, description='Updated model.', example='Pegasus'
    )
    primary: Optional[bool] = Field(
        None, description='Updated primary status.', example=False
    )
    type: Optional[Type] = Field(None, description='Updated type.', example='bike')
    mileage: Optional[float] = Field(
        None, description='Updated mileage.', example=10000.0
    )


class FileType1(Enum):
    gpx = 'gpx'
    tcx = 'tcx'


class CreateRouteRequest(BaseModel):
    name: str = Field(..., description='Name of the route.', example='Scenic Route')
    description: Optional[str] = Field(
        None, description='Description of the route.', example='Beautiful scenic path.'
    )
    file: Optional[bytes] = Field(
        None, description='GPX or TCX file (multipart upload)'
    )
    file_type: Optional[FileType1] = Field(
        None, description='Type of file.', example='gpx'
    )


class UpdateRouteRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the route.', example='Updated Scenic Route'
    )
    description: Optional[str] = Field(
        None, description='Description of the route.', example='Updated beautiful path.'
    )


class CreateClubPostRequest(BaseModel):
    title: str = Field(
        ..., description='Title of the post.', example='Group Run Announcement'
    )
    description: str = Field(
        ...,
        description='Description content of the post.',
        example='Join us for a group run this weekend!',
    )
    link: Optional[AnyUrl] = Field(
        None,
        description='Optional clickable link.',
        example='https://example.com/event',
    )
    embed_image: Optional[bytes] = Field(
        None, description='Optional image file to embed.'
    )
    tags: Optional[List[str]] = Field(
        None,
        description='Optional tags for the post.',
        example=['announcement', 'event'],
    )


class UpdateClubPostRequest(BaseModel):
    title: Optional[str] = Field(
        None, description='Updated title.', example='Updated Group Run'
    )
    description: Optional[str] = Field(
        None,
        description='Updated description.',
        example='Updated: Join us this weekend!',
    )
    link: Optional[AnyUrl] = Field(
        None, description='Updated link.', example='https://example.com/updated-event'
    )
    embed_image: Optional[bytes] = Field(None, description='Updated image file.')
    tags: Optional[List[str]] = Field(
        None, description='Updated tags.', example=['announcement']
    )


class ReportRequest(BaseModel):
    reason: str = Field(
        ..., description='Reason for the report.', example='Inappropriate content'
    )
    description: Optional[str] = Field(
        None,
        description='Detailed description of the issue.',
        example='The content violates community guidelines.',
    )


class SignupRequest(BaseModel):
    username: str = Field(
        ..., description='Username for the new account.', example='newuser'
    )
    password: str = Field(
        ..., description='Password for the new account.', example='securepassword123'
    )
    email: EmailStr = Field(
        ..., description='Email address.', example='newuser@example.com'
    )
    firstname: str = Field(..., description='First name.', example='New')
    lastname: str = Field(..., description='Last name.', example='User')


class LoginRequest(BaseModel):
    username: str = Field(
        ..., description='Username. Can also be email', example='existinguser'
    )
    password: str = Field(..., description='Password.', example='password123')


class Lap(BaseModel):
    lap_index: Optional[int] = Field(None, description='Index of the lap.', example=1)
    start_index: Optional[int] = Field(
        None, description="The start index of this effort in its activity's stream"
    )
    end_index: Optional[int] = Field(
        None, description="The end index of this effort in its activity's stream"
    )
    distance: Optional[float] = Field(None, description='meters', example=1000.0)
    elapsed_time: Optional[int] = Field(None, description='seconds', example=300)
    moving_time: Optional[int] = Field(
        None, description='Moving time in seconds.', example=290
    )
    average_speed: Optional[float] = Field(
        None, description='Average speed in m/s.', example=3.33
    )
    max_speed: Optional[float] = Field(
        None, description='Max speed in m/s.', example=4.0
    )
    elevation_gain: Optional[float] = Field(None, description='meters')
    start_time: Optional[datetime] = Field(
        None, description='Start time of lap.', example='2025-08-09T07:00:00Z'
    )


class Sex(Enum):
    M = 'M'
    F = 'F'
    cardboard_box = 'cardboard_box'


class AthleteSummary(BaseModel):
    id: int = Field(..., description='Athlete ID.', example=67890)
    username: Optional[str] = Field(None, description='Username.', example='runnerjoe')
    firstname: str = Field(..., description='First name.', example='Joe')
    lastname: str = Field(..., description='Last name.', example='Doe')
    profile_image_url: Optional[AnyUrl] = Field(
        None,
        description='Profile image URL.',
        example='https://example.com/profile.jpg',
    )
    city: Optional[str] = Field(None, description='City.', example='New York')
    state: Optional[str] = Field(None, description='State.', example='NY')
    country: Optional[str] = Field(None, description='Country.', example='USA')
    mod: Optional[bool] = Field(None, description='is mod?', example=True)
    sex: Optional[Sex] = Field(None, description='Sex.', example='M')
    created: Optional[datetime] = Field(
        None, description='Creation date.', example='2024-01-01T00:00:00Z'
    )
    updated: Optional[datetime] = Field(
        None, description='Last update date.', example='2025-08-09T00:00:00Z'
    )


class PersonalRecord(BaseModel):
    distance: Optional[int] = Field(None, description='Distance (meters)', example=5000)
    time: Optional[float] = Field(None, description='Time (s)', example=983)
    name: Optional[str] = Field(None, description='human-readable name', example='5k')


class MetricDataPoint(BaseModel):
    timestamp: datetime = Field(
        ...,
        description='The timestamp for the data point.',
        example='2025-08-11T00:00:00Z',
    )
    value: float = Field(..., description='The metric value.', example=50.5)


class Units(Enum):
    imperial = 'imperial'
    metric = 'metric'


class Preferences(BaseModel):
    units: Optional[Units] = Field(
        'metric',
        description='Whether the user wants feet/miles or meters/kilometers',
        example='metric',
    )


class StatsTotals(BaseModel):
    count: int = Field(
        ...,
        description='number of workouts of this type for whatever time frame',
        example=57,
    )
    distance: float = Field(
        ...,
        description='total distance covered over those workouts (meters)',
        example=324938.38,
    )
    moving_time: int = Field(
        ...,
        description='number of seconds you are moving during those workouts',
        example=209328,
    )
    elapsed_time: int = Field(
        ...,
        description='number of elapsed seconds (total workout running time)',
        example=4000098,
    )
    elevation_gain: float = Field(
        ...,
        description='total elevation gain for those workouts (meters)',
        example=20942.39,
    )


class Gear(BaseModel):
    id: str = Field(..., description='Gear ID', example=9328492348)
    name: str = Field(
        ..., description='user-set nickname for this gear', example='Cool Shoes'
    )
    description: Optional[str] = Field(
        None,
        description='user-set description for this gear',
        example='Main running shoes. They cool.',
    )
    brand_name: Optional[str] = Field(
        None, description='brand name of this gear', example='Hoka'
    )
    model_name: Optional[str] = Field(
        None, description='model or make of this gear', example='Mach 6'
    )
    primary: Optional[bool] = Field(
        None,
        description='whether this is the "primary" or default gear to be used for all compatible workouts',
        example=True,
    )
    type: Type = Field(
        ...,
        description='the machine-readable type of gear (just shoes and bike for now)',
        example='shoes',
    )
    mileage: Optional[float] = Field(
        None,
        description='distance completed using this gear (meters)',
        example=2644083.6,
    )


class Map(BaseModel):
    id: Optional[int] = Field(None, description='Map ID.', example=456)
    polyline: Optional[str] = Field(
        None,
        description='The polyline representation of the map',
        example='ki{eFvqfiVqAWQIGEEKAYJgBVqDJ{BHa@jAkNJw@Pw@V{APs@^aABQAOEQGKoJ_FuJkFqAo@{A}@sH{DiAs@Q]?WVy@`@oBt@_CB]KYMMkB{AQEI@WT{BlE{@zAQPI@ICsCqA_BcAeCmAaFmCqIoEcLeG}KcG}A}@cDaBiDsByAkAuBqBi@y@_@o@o@kB}BgIoA_EUkAMcACa@BeBBq@LaAJe@b@uA`@_AdBcD`@iAPq@RgALqAB{@EqAyAoOCy@AmCBmANqBLqAZkB\\\\iCPiBJwCCsASiCq@iD]eA]y@[i@w@mAa@i@k@g@kAw@i@Ya@Q]EWFMLa@~BYpAFNpA`Aj@n@X`@V`AHh@JfB@xAMvAGZGHIDIAWOEQNcC@sACYK[MSOMe@QKKKYOs@UYQISCQ?Q@WNo@r@OHGAGCKOQ_BU}@MQGG]Io@@c@FYNg@d@s@d@ODQAMOMaASs@_@a@SESAQDqBn@a@RO?KK?UBU\\\\kA@Y?WMo@Iy@GWQ_@WSSGg@AkABQB_Ap@_A^o@b@Q@o@IS@OHi@n@OFS?OI}@iAQMQGQC}@DOIIUK{@IUOMyBo@kASOKIQCa@L[|AgATWN[He@?QKw@FOPCh@Fx@l@TDLELKl@aAHIJEX@r@ZTDV@LENQVg@RkA@c@MeA?WFOPMf@Ej@Fj@@LGHKDM?_@_@iC?a@HKRIl@NT?FCHMFW?YEYGWQa@GYBiAIq@Gq@L_BHSHK|@WJETSLQZs@z@_A~@uA^U`@G\\\\CRB\\\\Tl@p@Th@JZ^bB`@lAHLXVLDP?LGFSKiDBo@d@wBVi@R]VYVE\\\\@`@Lh@Fh@CzAk@RSDQA]GYe@eAGWSiBAWBWBIJORK`@KPOPSTg@h@}Ad@o@F[E_@EGMKUGmAEYGMIMYKs@?a@J}@@_BD_@HQJMx@e@LKHKHWAo@UoAAWFmAH}@?w@C[YwAAc@HSNM|Ao@rA}@zAq@`@a@j@eAxAuBXQj@MXSR[b@gAFg@?YISOGaAHi@Xw@v@_@d@WRSFqARUHQJc@d@m@`A[VSFUBcAEU@WFULUPa@v@Y~@UrBc@dBI~@?l@P~ABt@N`HEjA]zAEp@@p@TrBCl@CTQb@k@dAg@jAU^KJYLK@k@A[Js@d@a@b@]RgBl@[FMAw@[]G]?m@D_@F]P[Vu@t@[TMF_@Do@E_@@q@P]PWZUZw@vAkAlAGJOj@IlAMd@OR{@p@a@d@sBpD]v@a@`Aa@n@]TODgBVk@Pe@^cBfBc@Rs@La@RSPm@|@wCpDS^Wp@QZML{@l@qBbCYd@k@lAIVCZBZNTr@`@RRHZANIZQPKDW@e@CaASU?I@YTKRQx@@\\\\VmALYRQLCL?v@P|@D\\\\GJEFKDM@OCa@COOYIGm@YMUCM@]JYr@uAx@kAt@}@jAeAPWbAkBj@s@bAiAz@oAj@m@VQlAc@VQ~@aA`Au@p@Q`AIv@MZORUV_@p@iB|AoCh@q@dAaANUNWH[N{AJ[^m@t@_Av@wA\\\\a@`@W`@In@Al@B^E`@Wl@u@\\\\[VQ\\\\K`@Eb@?R@dAZP@d@CRExAs@\\\\Yt@{@LG\\\\MjAATINOXo@d@kAl@_AHYBOCe@QiBCm@Fq@\\\\wADo@AyGEeBWuB@YHu@Tu@Lk@VcCTo@d@aA\\\\WJE`@G~@FP?VI\\\\U~@sANO`@SfAMj@U\\\\WjAsAXS`@UNENALBHFFL?^Ml@Uj@]b@q@RUJSPkChEc@XcAb@sA|@]PaA\\\\OJKNER?TDTNj@Jn@?p@OfC@ZR`B@VCV_@n@{@l@WbACv@OlABnAPl@LNNHbBBNBLFFJ@^GLg@x@i@|AMP[X}@XOJKPET?l@LhAFXp@fBDRCd@S\\\\_@Ps@PQ@}A]S?QDe@V]b@MR[fAKt@ErAF~CANILYDKGIKe@{@Yy@e@sB[gA[c@e@YUCU?WBUHUNQPq@`AiArAMV[^e@Zc@JQJKNMz@?r@Bb@PfAAfA@VVbADn@E`@KHSEe@SMAKDKFM\\\\^dDCh@m@LoAQ_@@MFOZLfBEl@QbASd@KLQBOAaAc@QAQ@QHc@v@ONMJOBOCg@c@]O[EMBKFGL?RHv@ARERGNe@h@{@h@WVGNDt@JLNFPFz@LdBf@f@PJNHPF`ADPJJJDl@I`@B^Tp@bALJNDNALIf@i@PGPCt@DNE`@Uv@[dAw@RITGRCtAARBPJLPJRZxB?VEX_@vAAR?RDNHJJBh@UnBm@h@IRDRJNNJPNbBFRJLLBLCzAmAd@Uf@Gf@?P@PFJNHPFTH`BDTHNJJJ@LG`@m@^YPER@RDPHNNJRLn@HRLN^VNPHTFX@\\\\UlDFb@FHh@NP@HKPsB?}ASkCQ{@[y@q@}@cA{@KOCQDa@t@{CFGJCf@Nl@ZtA~@r@p@`@h@rAxBd@rA\\\\fARdAPjANrB?f@AtBCd@QfBkAjJOlBChA?rBFrBNlBdAfKFzAC~@Iz@Mz@Sv@s@jBmAxBi@hAWt@Sv@Qx@O`BA`@?dAPfBVpAd@`BfBlFf@fBdA~Cr@pAz@fApBhBjAt@H?IL?FBFJLx@^lHvDvh@~XnElCbAd@pGhDbAb@nAr@`Ad@`GhDnBbAxCbBrWhNJJDPARGP_@t@Qh@]pAUtAoA`Ny@jJApBBNFLJFJBv@Hb@HBF?\\\\',
    )
    summary_polyline: Optional[str] = Field(
        None,
        description='A downsampled version of polyline',
        example='ki{eFvqfiVsBmA`Feh@qg@iX`B}JeCcCqGjIq~@kf@cM{MeHeX`@_GdGkSeBiXtB}YuEkPwFyDeAzAe@pC~DfGc@bIOsGmCcEiD~@oBuEkFhBcBmDiEfAVuDiAuD}NnDaNiIlCyDD_CtJKv@wGhD]YyEzBo@g@uKxGmHpCGtEtI~AuLrHkAcAaIvEgH_EaDR_FpBuBg@sNxHqEtHgLoTpIiCzKNr[sB|Es\\\\`JyObYeMbGsMnPsAfDxAnD}DBu@bCx@{BbEEyAoD`AmChNoQzMoGhOwX|[yIzBeFKg[zAkIdU_LiHxK}HzEh@vM_BtBg@xGzDbCcF~GhArHaIfByAhLsDiJuC?_HbHd@nL_Cz@ZnEkDDy@hHwJLiCbIrNrIvN_EfAjDWlEnEiAfBxDlFkBfBtEfDaAzBvDKdFx@|@XgJmDsHhAgD`GfElEzOwBnYdBxXgGlSc@bGdHpW|HdJztBnhAgFxc@HnCvBdA',
    )


class Resolution(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'


class Type3(Enum):
    heartrate = 'heartrate'
    power = 'power'


class ZoneRange(BaseModel):
    min: int = Field(..., description='Minimum value of the zone.', example=100)
    max: int = Field(..., description='Maximum value of the zone.', example=120)
    name: Optional[str] = Field(None, description='Name of the zone.', example='Zone 1')


class ErrorDetail(BaseModel):
    resource: Optional[str] = Field(
        None,
        description='Which part of the request (or part of the underlying server architecture) caused this error',
        example='Athlete',
    )
    field: Optional[str] = Field(
        None,
        description='The field (or subsection of a component) that caused the error',
        example='email',
    )
    code: Optional[str] = Field(
        None,
        description='A machine and human readable code describing what happened',
        example='invalid',
    )
    description: Optional[str] = Field(
        None,
        description='A human-readable error',
        example='Athlete email did not match regex',
    )


class ActivityType(Enum):
    run = 'run'
    ride = 'ride'
    swim = 'swim'
    walk = 'walk'
    hike = 'hike'
    workout = 'workout'
    virtual_run = 'virtual_run'
    virtual_ride = 'virtual_ride'


class StreamType(Enum):
    time = 'time'
    distance = 'distance'
    position = 'position'
    altitude = 'altitude'
    heartrate = 'heartrate'
    cadence = 'cadence'
    power = 'power'
    temperature = 'temperature'


class Visibility1(Enum):
    followers = 'followers'
    friends = 'friends'
    me = 'me'
    everyone = 'everyone'
    whitelist = 'whitelist'


class Visibility(BaseModel):
    visibility: Optional[Visibility1] = Field(
        'everyone', description='Visibility level for an activity', example='everyone'
    )
    whitelist: Optional[List[AthleteSummary]] = Field(
        [],
        description='If visibility is whitelist, the only logged in accounts that can view something with this visibility',
        example=[],
    )


class ActivityTag(Enum):
    race = 'race'
    training = 'training'
    commute = 'commute'
    indoor = 'indoor'
    long_run = 'long_run'
    recovery = 'recovery'
    virtual = 'virtual'
    workout = 'workout'


class ClubSummary(BaseModel):
    id: Optional[int] = Field(
        None, description="The club's unique identifier.", example=445566
    )
    name: Optional[str] = Field(
        None, description="The club's name.", example='Local Runners'
    )
    profile_medium: Optional[AnyUrl] = Field(
        None,
        description='URL to a 60x60 pixel profile picture.',
        example='https://example.com/clubprofile.jpg',
    )
    cover_photo: Optional[AnyUrl] = Field(
        None,
        description='URL to a cover photo.',
        example='https://example.com/clubcover.jpg',
    )
    activities: Optional[List[ActivityType]] = Field(
        None, description='The activity types that count for a club.', example=['run']
    )
    city: Optional[str] = Field(None, description="The club's city.", example='Raleigh')
    state: Optional[str] = Field(
        None,
        description="The club's state or geographical region.",
        example='North Carolina',
    )
    country: Optional[str] = Field(
        None, description="The club's country.", example='United States'
    )
    private: Optional[bool] = Field(
        None, description='Whether the club is private (invite only).', example=False
    )
    member_count: Optional[int] = Field(
        None, description="The club's member count.", example=50
    )
    verified: Optional[bool] = Field(
        None, description='Whether the club is verified or not.', example=True
    )
    url: Optional[str] = Field(
        None, description="The club's vanity URL.", example='localrunners'
    )
    created: Optional[datetime] = Field(
        None, description='Creation time.', example='2025-08-09T12:00:00Z'
    )
    updated: Optional[datetime] = Field(
        None, description='Last update time.', example='2025-08-09T13:00:00Z'
    )


class Club(ClubSummary):
    admin: Optional[bool] = Field(
        None,
        description='Whether the currently logged-in athlete is an administrator of this club.',
        example=False,
    )
    owner: Optional[bool] = Field(
        None,
        description='Whether the currently logged-in athlete is the owner of this club.',
        example=False,
    )
    tags: Optional[List[str]] = Field(
        None, description='Tags for the club.', example=['running', 'community']
    )


class ClubAthlete(BaseModel):
    id: Optional[int] = Field(None, description='Athlete ID in club.', example=67890)
    firstname: Optional[str] = Field(None, description='First name.', example='Jane')
    lastname: Optional[str] = Field(None, description='Last name.', example='Smith')
    profile_image_url: Optional[AnyUrl] = Field(
        None, description='Profile image.', example='https://example.com/jane.jpg'
    )
    admin: Optional[bool] = Field(None, description='Is admin.', example=True)
    owner: Optional[bool] = Field(None, description='Is owner.', example=False)


class ClubPost(BaseModel):
    id: int = Field(..., description='Post ID.', example=789)
    title: str = Field(
        ..., description='Title of the post.', example='Event Announcement'
    )
    description: str = Field(
        ..., description='Description of the post.', example='Upcoming group run!'
    )
    link: Optional[AnyUrl] = Field(
        None,
        description='Optional clickable link.',
        example='https://example.com/event',
    )
    embed_image_url: Optional[AnyUrl] = Field(
        None,
        description='Optional link to embedded image.',
        example='https://example.com/image.jpg',
    )
    tags: Optional[List[str]] = Field(
        None, description='Optional tags.', example=['announcement']
    )
    created: datetime = Field(
        ..., description='Creation time.', example='2025-08-09T12:00:00Z'
    )
    updated: Optional[datetime] = Field(
        None, description='Last update time.', example='2025-08-09T13:00:00Z'
    )
    athlete: AthleteSummary


class LeaderboardEntry(BaseModel):
    athlete: Optional[AthleteSummary] = None
    value: Optional[float] = Field(
        None, description='Value for the metric.', example=10000.0
    )
    rank: Optional[int] = Field(None, description='Rank in leaderboard.', example=1)


class InviteToClubRequest(BaseModel):
    athlete_id: Optional[int] = Field(
        None, description='The ID of the athlete to invite.', example=12345
    )


class StreamDataItem(BaseModel):
    __root__: Union[float, List[float]]


class ZoneBucket(BaseModel):
    min: Optional[float] = Field(
        None, description='Lower bound of the zone.', example=165
    )
    max: Optional[float] = Field(
        None, description='Upper bound of the zone.', example=185
    )
    time: Optional[int] = Field(
        None, description='Time spent in this zone in seconds.', example=254
    )


class ReportedType(Enum):
    activity = 'activity'
    athlete = 'athlete'
    route = 'route'
    club = 'club'


class Status(Enum):
    pending = 'pending'
    resolved = 'resolved'
    dismissed = 'dismissed'


class Report(BaseModel):
    id: Optional[int] = Field(None, example=123)
    reported_type: Optional[ReportedType] = Field(None, example='activity')
    reported_id: Optional[int] = Field(None, example=12345)
    reporter: Optional[AthleteSummary] = None
    reason: Optional[str] = Field(None, example='Inappropriate content')
    description: Optional[str] = Field(None, example='Violates guidelines')
    created: Optional[datetime] = Field(None, example='2025-08-17T12:00:00Z')
    status: Optional[Status] = Field(None, example='pending')


class Action(Enum):
    dismiss = 'dismiss'
    delete = 'delete'
    ban = 'ban'


class ResolveReportRequest(BaseModel):
    action: Optional[Action] = Field(None, example='dismiss')
    notes: Optional[str] = Field(None, example='No violation found')


class CreateActivityRequest(BaseModel):
    name: str = Field(
        ..., description='The name of the activity.', example='Morning Run'
    )
    type: Optional[ActivityType] = None
    visibility: Optional[Visibility] = None
    description: Optional[str] = Field(
        None,
        description='A detailed description of the activity.',
        example='A refreshing morning run in the park.',
    )
    hidden_stats: Optional[List[str]] = Field(
        None, description='Stats to hide from public view.', example=['heartrate']
    )
    tags: Optional[List[ActivityTag]] = None
    gear_id: Optional[str] = Field(
        None, description='ID of the gear used.', example='g123456'
    )
    start_time: datetime = Field(
        ..., description='Start time of the activity.', example='2025-08-08T07:00:00Z'
    )
    elapsed_time: int = Field(..., description='Duration in seconds.', example=3600)
    distance: Optional[float] = Field(None, description='Meters.', example=10000.0)
    elevation_gained: Optional[float] = Field(
        None, description='Total elevation gained in meters.', example=150.5
    )
    perceived_exertion: Optional[conint(ge=1, le=10)] = Field(
        None,
        description='Perceived exertion (how athlete felt after workout)',
        example=4,
    )


class CreateActivityFileRequest(BaseModel):
    name: str = Field(..., description='The name of the activity.', example='Trail Run')
    type: Optional[ActivityType] = None
    visibility: Optional[Visibility] = None
    description: Optional[str] = Field(
        None,
        description='A detailed description of the activity.',
        example='Challenging trail run.',
    )
    hidden_stats: Optional[List[str]] = Field(
        None, description='Stats to hide.', example=['power']
    )
    tags: Optional[List[ActivityTag]] = None
    gear_id: Optional[str] = Field(None, description='Gear ID.', example='g789012')
    file: bytes = Field(..., description='Binary file upload (TCX/GPX/FIT)')
    file_type: FileType = Field(
        ..., description='Type of the uploaded file.', example='gpx'
    )
    perceived_exertion: Optional[conint(ge=1, le=10)] = Field(
        None,
        description='Perceived exertion (how athlete felt after workout)',
        example=4,
    )


class UpdateActivityRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='Updated name of the activity.', example='Updated Morning Run'
    )
    type: Optional[ActivityType] = None
    visibility: Optional[Visibility] = None
    description: Optional[str] = Field(
        None, description='Updated description.', example='Updated description.'
    )
    gear_id: Optional[str] = Field(
        None, description='Updated gear ID.', example='3449583495678'
    )
    tags: Optional[List[ActivityTag]] = None
    distance: Optional[float] = Field(
        None, description='Updated distance in meters.', example=12000.0
    )
    elapsed_time: Optional[int] = Field(
        None, description='Updated elapsed time in seconds.', example=4000
    )
    elevation_gained: Optional[float] = Field(
        None, description='Updated elevation gained in meters.', example=200.0
    )


class UpdateAthleteRequest(BaseModel):
    weight: Optional[float] = Field(None, description='kilograms', example=70.5)
    display_name: Optional[str] = Field(
        None, description='Display name.', example='RunnerJoe'
    )
    bio: Optional[str] = Field(
        None, description='Bio of the athlete.', example='Avid runner.'
    )
    location: Optional[str] = Field(None, description='Location.', example='New York')
    default_sport: Optional[ActivityType] = None


class CreateClubRequest(BaseModel):
    name: str = Field(..., description='Name of the club.', example='Running Club')
    profile_medium: Optional[AnyUrl] = Field(
        None,
        description='URL to profile picture.',
        example='https://example.com/profile.jpg',
    )
    cover_photo: Optional[AnyUrl] = Field(
        None, description='URL to cover photo.', example='https://example.com/cover.jpg'
    )
    activities: Optional[List[ActivityType]] = Field(
        None, description='Activity types for the club.', example=['run', 'ride']
    )
    city: Optional[str] = Field(None, description='City of the club.', example='Boston')
    state: Optional[str] = Field(
        None, description='State or region.', example='Massachusetts'
    )
    country: Optional[str] = Field(None, description='Country.', example='USA')
    private: Optional[bool] = Field(
        None, description='Whether the club is private.', example=False
    )
    url: Optional[str] = Field(None, description='Vanity URL.', example='runningclub')
    tags: Optional[List[str]] = Field(
        None, description='Tags for the club.', example=['running', 'fitness']
    )


class UpdateClubRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='Updated name.', example='Updated Running Club'
    )
    profile_medium: Optional[AnyUrl] = Field(
        None,
        description='Updated profile URL.',
        example='https://example.com/newprofile.jpg',
    )
    cover_photo: Optional[AnyUrl] = Field(
        None,
        description='Updated cover URL.',
        example='https://example.com/newcover.jpg',
    )
    activities: Optional[List[ActivityType]] = Field(
        None, description='Updated activities.', example=['run', 'swim']
    )
    city: Optional[str] = Field(None, description='Updated city.', example='New York')
    state: Optional[str] = Field(None, description='Updated state.', example='New York')
    country: Optional[str] = Field(None, description='Updated country.', example='USA')
    private: Optional[bool] = Field(None, description='Updated privacy.', example=True)
    url: Optional[str] = Field(
        None, description='Updated URL.', example='updatedrunningclub'
    )
    tags: Optional[List[str]] = Field(
        None, description='Updated tags.', example=['marathon', 'training']
    )


class SummaryActivity(BaseModel):
    id: int = Field(..., description='ID.', example=12345)
    name: str = Field(..., description='Name.', example='Run')
    invisible: Optional[bool] = Field(
        False,
        description="If true, don't use this activity in relative effort or other calculations. Visibility still governs who can see this activity though",
        example=False,
    )
    city: Optional[str] = Field(
        None, description='City where the activity took place.', example='Boston'
    )
    state: Optional[str] = Field(
        None, description='State or region.', example='Massachusetts'
    )
    country: Optional[str] = Field(None, description='Country.', example='USA')
    type: ActivityType
    distance: Optional[float] = Field(None, description='Distance.', example=10000.0)
    elapsed_time: int = Field(..., description='Elapsed time.', example=3600)
    start_time: datetime = Field(
        ..., description='Start time.', example='2025-08-08T07:00:00Z'
    )
    visibility: Optional[Visibility] = None
    created: Optional[datetime] = Field(
        None, description='Creation time.', example='2025-08-08T07:00:00Z'
    )
    updated: Optional[datetime] = Field(
        None, description='Last update time.', example='2025-08-08T08:00:00Z'
    )
    perceived_exertion: Optional[conint(ge=1, le=10)] = Field(
        None,
        description='Perceived exertion (how athlete felt after workout)',
        example=4,
    )
    manual: Optional[bool] = Field(
        None, description='If the workout was manually added vs file', example=False
    )


class Athlete(AthleteSummary):
    gear: Optional[List[Gear]] = Field(None, description='List of gear.')
    height: Optional[int] = Field(None, description='Height in cm.', example=180)
    weight: Optional[int] = Field(None, description='Weight in kg.', example=75)
    clubs: Optional[List[ClubSummary]] = Field(
        None, description='Clubs the athlete is in.'
    )
    follower_count: Optional[int] = Field(
        None, description='Number of followers.', example=100
    )
    following_count: Optional[int] = Field(
        None, description='Number following.', example=50
    )
    friend_count: Optional[int] = Field(
        None, description='Number of friends.', example=30
    )
    preferences: Optional[Preferences] = None


class PersonalRecords(BaseModel):
    records: Optional[List[PersonalRecord]] = None


class AthleteMetrics(BaseModel):
    chronic_training_load: Optional[List[MetricDataPoint]] = Field(
        None, description='CTL data values over time'
    )
    acute_training_load: Optional[List[MetricDataPoint]] = Field(
        None, description='CTL data values over time'
    )
    training_stress_balance: Optional[List[MetricDataPoint]] = Field(
        None, description='CTL data values over time'
    )


class Stats(BaseModel):
    longest_run_distance: Optional[float] = Field(
        None, description='Longest run workout distance (meters)', example=23942.39
    )
    biggest_run_elevation_gain: Optional[float] = Field(
        None, description='Longest run workout elevation gain (meters)', example=500.0
    )
    week_run_totals: Optional[StatsTotals] = None
    ytd_run_totals: Optional[StatsTotals] = None
    all_run_totals: Optional[StatsTotals] = None


class Route(BaseModel):
    id: int = Field(..., description='Route ID', example=39480243982934)
    name: str = Field(
        ..., description='user-set name for this route', example='Cool House Loop'
    )
    description: Optional[str] = Field(
        None,
        description='user-set description for this route',
        example='Quick 4 mile loop around the house',
    )
    distance: Optional[float] = Field(
        None, description='distance of this route in meters', example=1924.23
    )
    elevation_gain: Optional[float] = Field(
        None, description='elevation gain for this route in meters', example=123
    )
    map: Optional[Map] = None
    athlete: Optional[AthleteSummary] = None
    created: Optional[datetime] = Field(
        None, description='when the Route was created', example='2025-08-08T15:20:23Z'
    )
    updated: Optional[datetime] = Field(
        None, description='Last update time.', example='2025-08-08T16:20:23Z'
    )


class Stream(BaseModel):
    type: Optional[StreamType] = None
    data: Optional[List[StreamDataItem]] = Field(
        None,
        description='the data in the stream',
        example=[
            904.5,
            957.8,
            963.1,
            989.1,
            1011.9,
            1049.7,
            1082.4,
            1098.1,
            1113.2,
            1124.7,
            1139.2,
            1142.1,
            1170.4,
            1173,
        ],
        title='streamData',
    )
    series_type: Optional[str] = Field(
        None, description='Type of series.', example='time'
    )
    original_size: Optional[int] = Field(
        None, description='the number of data points in this stream', example=14
    )
    resolution: Optional[Resolution] = Field(
        None,
        description='the resolution of the data (time between data points)',
        example='medium',
    )


class Zones(BaseModel):
    type: Type3 = Field(..., description='Type of zones.', example='heartrate')
    zones: List[ZoneRange] = Field(..., description='List of zone ranges.')


class ActivityZone(BaseModel):
    type: Optional[Type3] = Field(
        None, description='The type of zone data.', example='power'
    )
    distribution_buckets: Optional[List[ZoneBucket]] = Field(
        None, description='Array of time spent in each zone.'
    )
    sensor_based: Optional[bool] = Field(
        None,
        description='Whether the zone data is derived from a physical sensor.',
        example=True,
    )


class Fault(BaseModel):
    code: int = Field(
        ...,
        description='HTTP code returned by the request (for redundancy)',
        example=400,
    )
    message: str = Field(
        ...,
        description='A description of what caused the request to fail',
        example='Invalid input provided',
    )
    errors: Optional[List[ErrorDetail]] = Field(
        None, description='List of error details.'
    )


class LoginResponse(BaseModel):
    token: Optional[str] = Field(
        None,
        description='Authentication token.',
        example='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',
    )
    athlete: Optional[Athlete] = None


class Activity(SummaryActivity):
    description: Optional[str] = Field(
        None,
        description='Description of the activity.',
        example='Easy run with J-Money',
    )
    elapsed_time: Optional[int] = Field(None, description='seconds', example=1800)
    elevation_gained: Optional[float] = Field(None, description='meters', example=100.0)
    average_speed: Optional[float] = Field(
        None, description='meters/second', example=2.78
    )
    max_speed: Optional[float] = Field(None, description='meters/second', example=4.0)
    average_watts: Optional[float] = Field(None, description='watts', example=200)
    maximum_watts: Optional[float] = Field(None, description='watts', example=300)
    calories_burnt: Optional[float] = Field(
        None, description='calories burnt', example=753.2
    )
    average_cadence: Optional[float] = Field(
        None, description='steps/minute', example=129
    )
    max_cadence: Optional[float] = Field(None, description='steps/minute', example=183)
    average_heartrate: Optional[float] = Field(
        None, description='beats/minute', example=178
    )
    max_heartrate: Optional[float] = Field(
        None, description='beats/minute', example=199
    )
    min_elevation: Optional[float] = Field(
        None, description='meters above sea level', example=620
    )
    max_elevation: Optional[float] = Field(
        None, description='meters above sea level', example=693
    )
    gear_id: Optional[str] = Field(None, description='Gear used.', example='g123')
    tags: Optional[List[ActivityTag]] = None
    hidden_stats: Optional[List[str]] = Field(
        None, description='Hidden stats.', example=['heartrate']
    )
    laps: Optional[List[Lap]] = None
    athlete: Optional[AthleteSummary] = None
    map: Optional[Map] = None
    grade_adjusted_pace: Optional[float] = Field(
        None, description='GAP in seconds', example=369
    )
    relative_effort: Optional[float] = Field(None, description='UNITS?', example=100)


class StreamSet(BaseModel):
    streams: Optional[Dict[str, Stream]] = None
